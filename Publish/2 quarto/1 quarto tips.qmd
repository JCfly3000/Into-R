---
title: "quarto introduction"


author: "Tony Duan"

execute:
  warning: false
  error: false

  
format:
  html:
    toc: true
    toc-location: right
    code-fold: show
    code-tools: true
    
    code-block-bg: true
    code-block-border-left: "#31BAE9"
    code-copy: true
css: hscroll.css
---

# install quarto

## install quarto CLI

https://quarto.org/docs/get-started/

## install quarto pacakge

```{r}
#| eval: false
install.packages("quarto")
```

# check quarto version

## in Terminal

```{bach filename="Terminal"}
#| eval: false
quarto check
```

![](images/paste-1.png){width="600"}

## in R

```{r}
library(quarto)
quarto_version()
```

quarto location

```{r}
quarto_path()
```

# quarto code chunk


## R

```{{R}}
version
```

## Python

```{{python}}
import sys
print(sys.version)
```

## Bath


```{{bash}}
echo "foo" 
```


# quarto code chunk option

## in YAML header

``` yaml
---
title: "My Document"
execute:
  echo: false
jupyter: python3
---
```

-   eval： Evaluate the code chunk (if false, just echos the code into the output).

-   echo： Include the source code in output.

-   output： Include the results of executing the code in the output (true, false, or asis to indicate that the output is raw markdown and should not have any of Quarto’s standard enclosing markdown).

-   warning： Include warnings in the output.

-   error： Evaluate the code chunk (if false, just echos the code into the output).

-   include： Catch all for preventing any output (code or results) from being included (e.g. include: false suppresses all output from the code block).

## in code chunk

```{bash}
 #| eval: false
```


# code chunk name

`{r filename='code chunk name sample'}`

```{r filename='code chunk name sample'}
a=1
a
```

# Rmarkdown

```{r}
#| eval: false
*italics* and _italics_
**bold** and __bold__
superscript^2^
~~strikethrough~~
[link](www.rstudio.com)
```

```{r}
#| eval: false
*italics* 
```

*italics*

```{r}
#| eval: false
**bold**
```

**bold**

```{r}
#| eval: false
superscript^2^
```

superscript^2^

```{r}
#| eval: false
~~strikethrough~~
```

~~strikethrough~~

```{r}
#| eval: false
`highlight`
```

`highlight`

# link

```{r}
#| eval: false
[link](www.rstudio.com)
```

[link](www.rstudio.com)

# tab

```{r}
#| eval: false
::: {.panel-tabset}

## Tab 1

This is tab 1


## Tab 2

This is tab 2

:::
```

::: panel-tabset
## Tab 1

This is tab 1

## Tab 2

This is tab 2
:::

# column display

```{r}
#| eval: false
::: columns
::: {.column width="40%"}
this column with 40% width
::: 

::: {.column width="60%"}
this column with 60% width
::: 

::: 
```

::::: columns
::: {.column width="40%"}
this column with 40% width
:::

::: {.column width="60%"}
this column with 60% width
:::
:::::

# Add a horizontal scroll bar

-   add hscroll.css file

```{r}
#| eval: false
.hscroll {
  overflow: auto;
  white-space: nowrap;
}
```

-   add css option in YAML header

```{r}
#| eval: false
---
css: hscroll.css
---
```

-   add `# {.hscroll .scrollable}` on the section which want to be Slide bar

#  {.hscroll .scrollable}

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas dolor mauris, mattis non nunc nec, luctus aliquet magna. In tortor ante, aliquam eget felis eu, consectetur congue enim. Pellentesque pellentesque tincidunt lectus quis lacinia. Aliquam dolor sem, aliquet vitae aliquam eget, vehicula ac augue. Pellentesque molestie quam et commodo dignissim. Suspendisse potenti. Sed pellentesque metus non turpis condimentum molestie. Nullam accumsan urna nec luctus rutrum. Nunc dapibus auctor convallis. Praesent ac felis fermentum, venenatis elit vel, venenatis mi. Fusce non tellus risus. Phasellus elementum erat sit amet urna venenatis maximus. Nunc vehicula pretium scelerisque.

# Add a vertical scroll bar

::: {.scroll-container style="overflow-x: scroll; height: 600px;"}
images1.png

images2.png
:::

::: {.scroll-container style="overflow-x: scroll; height: 600px;"}
![](images/12.png){width="900"}

![](images/13.png){width="900"}
:::

# add a output hide bottom at quarto file

## step 1.  add foldableCodeBlcok.lua into blog root folder

```{r filename='foldableCodeBlcok.lua'}
#| eval: false
function CodeBlock(elem)
  if elem.classes and elem.classes:find("details") then
    local summary = "Code"
    if elem.attributes.summary then
      summary = elem.attributes.summary
    end
    return{
      pandoc.RawBlock(
        "html", "<details><summary>" .. summary .. "</summary>"
      ),
      elem,
      pandoc.RawBlock("html", "</details>")
    }
  end
end
```

## step 2.  add following line in `_quarto.yml`

```{r filename='_quarto.yml'}
#| eval: false
website:
  title: "quarto blog"

filters:
  - foldableCodeBlcok.lua
```


## step 3.  put following on code chunk:

`{r, attr.output='.details summary="sessionInfo()"'}`

```{r, attr.output='.details summary="sessionInfo()"'}
#| eval: true
sessionInfo()
```

# render all quarto website

```{r filename="Terminal"}
#| eval: false
quarto render "tidymodel in R"
```

# embed video

## embed youtube

```{r}
#| eval: false
<iframe width="640" height="480" src="https://www.youtube.com/embed/nku5zFMZAdU" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen>
</iframe>

```

## embed local video

```{r}
#| eval: false
{{< video images/vv.mp4 height="600" >}}
```

# embed audio

::: panel-tabset
## in code

```{r}
#| eval: false


<figure>
<figcaption>click to play</figcaption>
<audio controls src="aa.mp3">
        Your browser does not support the
        <code>audio</code> element.
</audio>
</figure>

```

## in YAML header

``` yaml
---
format:
  html:
    resources:
      - aa.mp3
---
```
:::


# Fonts

## in _quarto.yml(for all page) or header(only for this page)

```{r filename="_quarto.yml"}
#| eval: false
format:
  html:
    mainfont:Times New Roman
    font-size: 120%;
  
# can find more font:https://developer.mozilla.org/en-US/docs/Web/CSS/font-family
```

source:https://quarto.org/docs/reference/formats/context.html

## in page
```{r}
#| eval: false
<p style="font-family: times, serif; font-size:500% ">This is font size 500%</p>
```

<p style="font-family: times, serif; font-size:500% ">This is font size 500%</p> 

```{r}
#| eval: false
<p style="font-family: times, serif; font-size:50% ">This is font size 50%</p>
```

<p style="font-family: times, serif; font-size:50% ">This is font size 50%</p> 



# Theme

in _quarto.yml(for all page) or header(only for this page)

```{r filename="_quarto.yml"}
#| eval: false
theme:
  light: cosmo
  dark: [cosmo, theme-dark.scss]
```


source:https://quarto.org/docs/output-formats/html-themes.html







# Managing Execution


## render a folder or file


```{bach filename="Terminal"}
#| eval: false
quarto render introduction.qmd
quarto render subdir/
```




## Freeze

You can use the freeze option to denote that computational documents should never be re-rendered during a global project render, or alternatively only be re-rendered when their source file changes:

in _quarto.yml(for all page) or header(only for this page)

```{r filename="_quarto.yml"}
#| eval: false
execute:
  freeze: true  # never re-render during project render
```


```{r filename="_quarto.yml"}
#| eval: false
execute:
  freeze: auto  # re-render only when source changes
```



## Cache

You can use the cache option to cache the results of computations (using the knitr cache for R documents, and Jupyter Cache for Jupyter documents):

```{r filename="_quarto.yml"}
#| eval: false
execute:
  cache: true
```


Note that cache invalidation is triggered by changes in chunk source code (or other cache attributes you’ve defined). You may however need to manually refresh the cache if you know that some other input (or even time) has changed sufficiently to warrant an update. To do this, render either individual files or an entire project using the --cache-refresh option:




source:https://quarto.org/docs/projects/code-execution.html

```{r filename="Terminal"}
#| eval: false
quarto render mydoc.qmd --cache-refresh # single doc
quarto render --cache-refresh           # entire project
```


# add comment

## using giscus comment tool

https://giscus.app/

### step 1 install giscus on github

https://github.com/apps/giscus

### step 2 enable GitHub Discussions for your repository

![](images/clipboard-2990658216.png)

### step 3 add script to blog post

```{r}
#| eval: false
'''
<script src="https://giscus.app/client.js"
        data-repo="[ENTER REPO HERE]"
        data-repo-id="[ENTER REPO ID HERE]"
        data-category="[ENTER CATEGORY NAME HERE]"
        data-category-id="[ENTER CATEGORY ID HERE]"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="bottom"
        data-theme="preferred_color_scheme"
        data-lang="en"
        crossorigin="anonymous"
        async>
</script>
'''
```


# Reference:

https://www.rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf