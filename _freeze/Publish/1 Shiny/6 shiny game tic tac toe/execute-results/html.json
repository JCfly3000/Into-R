{
  "hash": "722df2bd4466eaacf6c76ee86b4e2eed",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"shiny game in browser:tic tac toe\"\nauthor: \"Tony Duan\"\n\nexecute:\n  warning: false\n  error: false\n\nformat:\n  html:\n    toc: true\n    toc-location: right\n    code-fold: show\n    code-tools: true\n    number-sections: true\n    code-block-bg: true\n    code-block-border-left: \"#31BAE9\"\n    \n\nfilters:\n  - shinylive\n---\n\n\ncreate shiny in quarto doc\n\n\n# step 1 add quarto extension in project root folder\n\n```{bash}\n#| eval: false\nquarto add quarto-ext/shinylive\n```\n\n# step 2 add in header\n\n```yaml\n---\n\nfilters:\n  - shinylive\n  \n---\n```\n\n# step 3 make shiny app \n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\n\n\nlibrary(shiny)\n\n# UI\nui <- fluidPage(\n    titlePanel(\"Tic-Tac-Toe\"),\n    sidebarLayout(\n        sidebarPanel(\n            actionButton(\"new_game\", \"New Game\"),\n            h4(\"Current Player:\"),\n            textOutput(\"current_player\")\n        ),\n        mainPanel(\n            uiOutput(\"board\"),\n            h3(textOutput(\"game_status\"))\n        )\n    )\n)\n\n# Server\nserver <- function(input, output, session) {\n\n    # Game state\n    game <- reactiveValues(\n        board = matrix(rep(\"\", 3), nrow = 3, ncol = 3),\n        current_player = \"X\",\n        game_over = FALSE,\n        winner = NULL\n    )\n\n    # Render the game board\n    output$board <- renderUI({\n        fluidRow(\n            lapply(1:3, function(i) {\n                column(4,\n                    lapply(1:3, function(j) {\n                        actionButton(paste0(\"cell_\", i, \"_\", j), label = game$board[i, j], style = \"width:100px; height:100px; font-size: 40px;\")\n                    })\n                )\n            })\n        )\n    })\n\n    # Display current player\n    output$current_player <- renderText({\n        game$current_player\n    })\n\n    # Handle cell clicks\n    observe({\n        lapply(1:3, function(i) {\n            lapply(1:3, function(j) {\n                observeEvent(input[[paste0(\"cell_\", i, \"_\", j)]], {\n                    if (game$board[i, j] == \"\" && !game$game_over) {\n                        game$board[i, j] <- game$current_player\n                        check_winner()\n                        if (!game$game_over) {\n                            game$current_player <- ifelse(game$current_player == \"X\", \"O\", \"X\")\n                        }\n                    }\n                })\n            })\n        })\n    })\n\n    # Check for a winner\n    check_winner <- function() {\n        board <- game$board\n        # Check rows\n        for (i in 1:3) {\n            if (all(board[i, ] == game$current_player) && board[i, 1] != \"\") {\n                game$winner <- game$current_player\n                game$game_over <- TRUE\n                return()\n            }\n        }\n        # Check columns\n        for (j in 1:3) {\n            if (all(board[, j] == game$current_player) && board[1, j] != \"\") {\n                game$winner <- game$current_player\n                game$game_over <- TRUE\n                return()\n            }\n        }\n        # Check diagonals\n        if (all(diag(board) == game$current_player) && board[1, 1] != \"\") {\n            game$winner <- game$current_player\n            game$game_over <- TRUE\n            return()\n        }\n        if (all(diag(board[ , 3:1]) == game$current_player) && board[1, 3] != \"\") {\n            game$winner <- game$current_player\n            game$game_over <- TRUE\n            return()\n        }\n        # Check for a tie\n        if (all(board != \"\")) {\n            game$winner <- \"Tie\"\n            game$game_over <- TRUE\n        }\n    }\n\n    # Display game status\n    output$game_status <- renderText({\n        if (game$game_over) {\n            if (game$winner == \"Tie\") {\n                \"It's a tie!\"\n            } else {\n                paste(\"Player\", game$winner, \"wins!\")\n            }\n        }\n    })\n\n    # New game button\n    observeEvent(input$new_game, {\n        game$board <- matrix(rep(\"\", 3), nrow = 3, ncol = 3)\n        game$current_player <- \"X\"\n        game$game_over <- FALSE\n        game$winner <- NULL\n    })\n\n}\n\n# Run the application\nshinyApp(ui = ui, server = server)\n\n```\n\n",
    "supporting": [
      "6 shiny game tic tac toe_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}