{
  "hash": "6d0646164b48b80ebbc43eff72f32fee",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"shiny game in browser:coneect four\"\nauthor: \"Tony Duan\"\n\nexecute:\n  warning: false\n  error: false\n\nformat:\n  html:\n    toc: true\n    toc-location: right\n    code-fold: show\n    code-tools: true\n    number-sections: true\n    code-block-bg: true\n    code-block-border-left: \"#31BAE9\"\n    \n\nfilters:\n  - shinylive\n---\n\n\ncreate a connect four game in shiny call connect_four_app.R\n\nmake adjustment for bottom 1-7 and make it on top of the grid\n\nmake the bottom circle as same as the grid\n\ndisplay the tokens and when win display winer is red or yellow\n\n\n\n# step 1 add quarto extension in project root folder\n\n```{bash}\n#| eval: false\nquarto add quarto-ext/shinylive\n```\n\n# step 2 add in header\n\n```yaml\n---\n\nfilters:\n  - shinylive\n  \n---\n```\n\n# step 3 make shiny app \n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\n\n\nlibrary(shiny)\n\n# UI\nui <- fluidPage(\n  titlePanel(\"Connect Four\"),\n  sidebarLayout(\n    sidebarPanel(\n      actionButton(\"reset\", \"New Game\"),\n      hr(),\n      uiOutput(\"game_status_ui\")\n    ),\n    mainPanel(\n      uiOutput(\"board\")\n    )\n  )\n)\n\n# Server\nserver <- function(input, output, session) {\n\n  # Game state\n  game <- reactiveValues(\n    board = matrix(0, 6, 7),\n    current_player = 1,\n    winner = 0 # 0: in progress, 1: player 1 wins, 2: player 2 wins, -1: draw\n  )\n\n  # Game Status UI (current player)\n  output$game_status_ui <- renderUI({\n    if (game$winner == 0) {\n      player_color_name <- if (game$current_player == 1) \"Red\" else \"Yellow\"\n      player_color_hex <- if (game$current_player == 1) \"red\" else \"yellow\"\n      tagList(\n        h4(\"Current Turn:\"),\n        div(\n          style = paste0(\n            \"width: 30px; height: 30px; background-color: \", player_color_hex, \"; \",\n            \"border-radius: 50%; display: inline-block; vertical-align: middle; border: 1px solid black;\"\n          )\n        ),\n        tags$span(player_color_name, style = \"font-size: 18px; vertical-align: middle; margin-left: 10px;\")\n      )\n    }\n  })\n\n  # Create the game board UI\n  output$board <- renderUI({\n    board_matrix <- game$board\n\n    # Column buttons on top\n    col_buttons <- fluidRow(\n      lapply(1:7, function(col) {\n        actionButton(\n          inputId = paste0(\"col_\", col),\n          label = as.character(col),\n          style = \"width: 50px; height: 50px; border-radius: 50%; margin: 2px;\"\n        )\n      })\n    )\n\n    # The grid of circles\n    board_html <- lapply(1:6, function(row) {\n      fluidRow(\n        lapply(1:7, function(col) {\n          cell_value <- board_matrix[row, col]\n          cell_color <- if (cell_value == 1) \"red\" else if (cell_value == 2) \"yellow\" else \"lightgrey\"\n          div(\n            style = paste0(\n              \"display:inline-block; vertical-align:top; \",\n              \"width:50px; height:50px; background-color:\", cell_color, \"; \",\n              \"border: 1px solid black; border-radius: 50%; margin: 2px;\"\n            )\n          )\n        })\n      )\n    })\n\n    tagList(col_buttons, board_html)\n  })\n\n  # Handle column clicks\n  observe({\n    lapply(1:7, function(col) {\n      observeEvent(input[[paste0(\"col_\", col)]], {\n        # Proceed only if game is not over\n        if (game$winner == 0) {\n          # Find the lowest empty cell in the column\n          empty_cells <- which(game$board[, col] == 0)\n          if (length(empty_cells) > 0) {\n            row <- max(empty_cells)\n            game$board[row, col] <- game$current_player\n\n            # Check for winner\n            if (check_winner(game$board, game$current_player)) {\n              game$winner <- game$current_player\n              winner_color <- if (game$winner == 1) \"Red\" else \"Yellow\"\n              showModal(modalDialog(\n                title = \"Game Over\",\n                paste(winner_color, \"wins!\"),\n                easyClose = TRUE,\n                footer = NULL\n              ))\n            } else if (all(game$board != 0)) { # Check for a draw\n                game$winner <- -1 # Using -1 to signify a draw\n                showModal(modalDialog(\n                    title = \"Game Over\",\n                    \"It's a draw!\",\n                    easyClose = TRUE,\n                    footer = NULL\n                ))\n            } else {\n              # Switch player\n              game$current_player <- if (game$current_player == 1) 2 else 1\n            }\n          }\n        }\n      })\n    })\n  })\n\n  # Check for a winner\n  check_winner <- function(board, player) {\n    # Check rows\n    for (r in 1:6) {\n      for (c in 1:4) {\n        if (all(board[r, c:(c + 3)] == player)) return(TRUE)\n      }\n    }\n\n    # Check columns\n    for (r in 1:3) {\n      for (c in 1:7) {\n        if (all(board[r:(r + 3), c] == player)) return(TRUE)\n      }\n    }\n\n    # Check diagonals (top-left to bottom-right)\n    for (r in 1:3) {\n      for (c in 1:4) {\n        if (all(diag(board[r:(r + 3), c:(c + 3)]) == player)) return(TRUE)\n      }\n    }\n\n    # Check diagonals (top-right to bottom-left)\n    for (r in 1:3) {\n      for (c in 4:7) {\n        if (all(c(board[r, c], board[r + 1, c - 1], board[r + 2, c - 2], board[r + 3, c - 3]) == player)) {\n          return(TRUE)\n        }\n      }\n    }\n\n    return(FALSE)\n  }\n\n  # Reset the game\n  observeEvent(input$reset, {\n    game$board <- matrix(0, 6, 7)\n    game$current_player <- 1\n    game$winner <- 0\n  })\n\n}\n\n# Run the app\nshinyApp(ui = ui, server = server)\n```\n\n",
    "supporting": [
      "7 shiny game connect four_files"
    ],
    "filters": [],
    "includes": {}
  }
}