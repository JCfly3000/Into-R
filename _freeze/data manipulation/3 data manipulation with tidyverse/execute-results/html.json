{
  "hash": "3cca7a951c4cfa25cb96ea5d950bbfd6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Manipulation with tidyverse\"\nexecute:\n  warning: false\n  error: false\nformat:\n  html:\n    toc: true\n    toc-location: right\n    code-fold: show\n    code-tools: true\n    number-sections: false\n    code-block-bg: true\n    code-block-border-left: \"#31BAE9\"\n---\n\nThe `tidyverse` is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. This guide focuses on `dplyr`, `tidyr`, `stringr`, and `lubridate`, the core packages for data manipulation.\n\n![](images/ggplot_hive.jpg){width=\"600\"}\n\n# 1. `dplyr`: A Grammar of Data Manipulation\n\n`dplyr` provides a consistent and intuitive grammar for data manipulation. Its functions, or \"verbs,\" are easy to read and can be chained together using the pipe operator (`%>%`), which passes the result of one function as the first argument to the next.\n\n![](images/logo.png){width=\"231\"}\n\n## Load Packages and Data\n\nFirst, we load the `tidyverse` suite of packages.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\nWe will use the built-in `mtcars` dataset. For clarity, we convert the row names to a proper column called `car_name`.\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(mtcars)\n\nsmall_mtcars <- mtcars %>% \n  select(cyl, mpg, hp) %>% \n  head()\n\nsmall_mtcars <- rownames_to_column(small_mtcars, var = \"car_name\")\n\nmtcars_df <- mtcars %>% \n  rownames_to_column(var = \"car_name\") %>% \n  as_tibble() # Convert to a tibble for better printing\n\nhead(mtcars_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 12\n  car_name       mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n  <chr>        <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 Mazda RX4     21       6   160   110  3.9   2.62  16.5     0     1     4     4\n2 Mazda RX4 W…  21       6   160   110  3.9   2.88  17.0     0     1     4     4\n3 Datsun 710    22.8     4   108    93  3.85  2.32  18.6     1     1     4     1\n4 Hornet 4 Dr…  21.4     6   258   110  3.08  3.22  19.4     1     0     3     1\n5 Hornet Spor…  18.7     8   360   175  3.15  3.44  17.0     0     0     3     2\n6 Valiant       18.1     6   225   105  2.76  3.46  20.2     1     0     3     1\n```\n\n\n:::\n:::\n\n## Get Column Names\n\nThe `names()` function returns a character vector of the column names in a data frame.\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(mtcars_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"car_name\" \"mpg\"      \"cyl\"      \"disp\"     \"hp\"       \"drat\"    \n [7] \"wt\"       \"qsec\"     \"vs\"       \"am\"       \"gear\"     \"carb\"    \n```\n\n\n:::\n:::\n\n\n\n## `select()`: Pick columns by name\n\n`select()` allows you to subset your data by choosing specific columns.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select a few specific columns\nmtcars_df %>% select(car_name, mpg, hp, cyl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 32 × 4\n   car_name            mpg    hp   cyl\n   <chr>             <dbl> <dbl> <dbl>\n 1 Mazda RX4          21     110     6\n 2 Mazda RX4 Wag      21     110     6\n 3 Datsun 710         22.8    93     4\n 4 Hornet 4 Drive     21.4   110     6\n 5 Hornet Sportabout  18.7   175     8\n 6 Valiant            18.1   105     6\n 7 Duster 360         14.3   245     8\n 8 Merc 240D          24.4    62     4\n 9 Merc 230           22.8    95     4\n10 Merc 280           19.2   123     6\n# ℹ 22 more rows\n```\n\n\n:::\n:::\n\nUse helper functions like `starts_with()`, `ends_with()`, and `contains()` for powerful selections.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select all columns that start with the letter \"d\"\nmtcars_df %>% select(starts_with(\"d\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 32 × 2\n    disp  drat\n   <dbl> <dbl>\n 1  160   3.9 \n 2  160   3.9 \n 3  108   3.85\n 4  258   3.08\n 5  360   3.15\n 6  225   2.76\n 7  360   3.21\n 8  147.  3.69\n 9  141.  3.92\n10  168.  3.92\n# ℹ 22 more rows\n```\n\n\n:::\n:::\n\nUse the `-` sign to deselect or drop columns.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select all columns except `vs` and `am`\nmtcars_df %>% select(-vs, -am)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 32 × 10\n   car_name            mpg   cyl  disp    hp  drat    wt  qsec  gear  carb\n   <chr>             <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 Mazda RX4          21       6  160    110  3.9   2.62  16.5     4     4\n 2 Mazda RX4 Wag      21       6  160    110  3.9   2.88  17.0     4     4\n 3 Datsun 710         22.8     4  108     93  3.85  2.32  18.6     4     1\n 4 Hornet 4 Drive     21.4     6  258    110  3.08  3.22  19.4     3     1\n 5 Hornet Sportabout  18.7     8  360    175  3.15  3.44  17.0     3     2\n 6 Valiant            18.1     6  225    105  2.76  3.46  20.2     3     1\n 7 Duster 360         14.3     8  360    245  3.21  3.57  15.8     3     4\n 8 Merc 240D          24.4     4  147.    62  3.69  3.19  20       4     2\n 9 Merc 230           22.8     4  141.    95  3.92  3.15  22.9     4     2\n10 Merc 280           19.2     6  168.   123  3.92  3.44  18.3     4     4\n# ℹ 22 more rows\n```\n\n\n:::\n:::\n\n## Select by Index\n\nYou can also select columns by their position.\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars_df %>% select(1, 2) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 32 × 2\n   car_name            mpg\n   <chr>             <dbl>\n 1 Mazda RX4          21  \n 2 Mazda RX4 Wag      21  \n 3 Datsun 710         22.8\n 4 Hornet 4 Drive     21.4\n 5 Hornet Sportabout  18.7\n 6 Valiant            18.1\n 7 Duster 360         14.3\n 8 Merc 240D          24.4\n 9 Merc 230           22.8\n10 Merc 280           19.2\n# ℹ 22 more rows\n```\n\n\n:::\n:::\n\n## Drop Columns\n\nUse the `-` sign to deselect or drop columns.\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars_df %>% select(-cyl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 32 × 11\n   car_name            mpg  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   <chr>             <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 Mazda RX4          21    160    110  3.9   2.62  16.5     0     1     4     4\n 2 Mazda RX4 Wag      21    160    110  3.9   2.88  17.0     0     1     4     4\n 3 Datsun 710         22.8  108     93  3.85  2.32  18.6     1     1     4     1\n 4 Hornet 4 Drive     21.4  258    110  3.08  3.22  19.4     1     0     3     1\n 5 Hornet Sportabout  18.7  360    175  3.15  3.44  17.0     0     0     3     2\n 6 Valiant            18.1  225    105  2.76  3.46  20.2     1     0     3     1\n 7 Duster 360         14.3  360    245  3.21  3.57  15.8     0     0     3     4\n 8 Merc 240D          24.4  147.    62  3.69  3.19  20       1     0     4     2\n 9 Merc 230           22.8  141.    95  3.92  3.15  22.9     1     0     4     2\n10 Merc 280           19.2  168.   123  3.92  3.44  18.3     1     0     4     4\n# ℹ 22 more rows\n```\n\n\n:::\n:::\n\n## Rename Columns\n\nThe `rename()` verb changes the name of a column.\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars_df %>% rename(new_cyl = cyl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 32 × 12\n   car_name    mpg new_cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   <chr>     <dbl>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 Mazda RX4  21         6  160    110  3.9   2.62  16.5     0     1     4     4\n 2 Mazda RX…  21         6  160    110  3.9   2.88  17.0     0     1     4     4\n 3 Datsun 7…  22.8       4  108     93  3.85  2.32  18.6     1     1     4     1\n 4 Hornet 4…  21.4       6  258    110  3.08  3.22  19.4     1     0     3     1\n 5 Hornet S…  18.7       8  360    175  3.15  3.44  17.0     0     0     3     2\n 6 Valiant    18.1       6  225    105  2.76  3.46  20.2     1     0     3     1\n 7 Duster 3…  14.3       8  360    245  3.21  3.57  15.8     0     0     3     4\n 8 Merc 240D  24.4       4  147.    62  3.69  3.19  20       1     0     4     2\n 9 Merc 230   22.8       4  141.    95  3.92  3.15  22.9     1     0     4     2\n10 Merc 280   19.2       6  168.   123  3.92  3.44  18.3     1     0     4     4\n# ℹ 22 more rows\n```\n\n\n:::\n:::\n\n\n## `filter()`: Pick rows by condition\n\n`filter()` subsets rows based on logical conditions. Only rows where the condition is `TRUE` are kept.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter for cars with 8 cylinders\nmtcars_df %>% filter(cyl == 8)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14 × 12\n   car_name      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   <chr>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 Hornet Spo…  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n 2 Duster 360   14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n 3 Merc 450SE   16.4     8  276.   180  3.07  4.07  17.4     0     0     3     3\n 4 Merc 450SL   17.3     8  276.   180  3.07  3.73  17.6     0     0     3     3\n 5 Merc 450SLC  15.2     8  276.   180  3.07  3.78  18       0     0     3     3\n 6 Cadillac F…  10.4     8  472    205  2.93  5.25  18.0     0     0     3     4\n 7 Lincoln Co…  10.4     8  460    215  3     5.42  17.8     0     0     3     4\n 8 Chrysler I…  14.7     8  440    230  3.23  5.34  17.4     0     0     3     4\n 9 Dodge Chal…  15.5     8  318    150  2.76  3.52  16.9     0     0     3     2\n10 AMC Javelin  15.2     8  304    150  3.15  3.44  17.3     0     0     3     2\n11 Camaro Z28   13.3     8  350    245  3.73  3.84  15.4     0     0     3     4\n12 Pontiac Fi…  19.2     8  400    175  3.08  3.84  17.0     0     0     3     2\n13 Ford Pante…  15.8     8  351    264  4.22  3.17  14.5     0     1     5     4\n14 Maserati B…  15       8  301    335  3.54  3.57  14.6     0     1     5     8\n```\n\n\n:::\n:::\n\nCombine conditions with logical operators:\n-   `,` or `&` for AND\n-   `|` for OR\n-   `!` for NOT\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter for 8-cylinder cars with more than 200 horsepower\nmtcars_df %>% filter(cyl == 8 & hp > 200)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 × 12\n  car_name       mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n  <chr>        <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 Duster 360    14.3     8   360   245  3.21  3.57  15.8     0     0     3     4\n2 Cadillac Fl…  10.4     8   472   205  2.93  5.25  18.0     0     0     3     4\n3 Lincoln Con…  10.4     8   460   215  3     5.42  17.8     0     0     3     4\n4 Chrysler Im…  14.7     8   440   230  3.23  5.34  17.4     0     0     3     4\n5 Camaro Z28    13.3     8   350   245  3.73  3.84  15.4     0     0     3     4\n6 Ford Panter…  15.8     8   351   264  4.22  3.17  14.5     0     1     5     4\n7 Maserati Bo…  15       8   301   335  3.54  3.57  14.6     0     1     5     8\n```\n\n\n:::\n\n```{.r .cell-code}\n# Filter for cars that are either 8-cylinder OR have more than 300 horsepower\nmtcars_df %>% filter(cyl == 8 | hp > 300)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14 × 12\n   car_name      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   <chr>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 Hornet Spo…  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n 2 Duster 360   14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n 3 Merc 450SE   16.4     8  276.   180  3.07  4.07  17.4     0     0     3     3\n 4 Merc 450SL   17.3     8  276.   180  3.07  3.73  17.6     0     0     3     3\n 5 Merc 450SLC  15.2     8  276.   180  3.07  3.78  18       0     0     3     3\n 6 Cadillac F…  10.4     8  472    205  2.93  5.25  18.0     0     0     3     4\n 7 Lincoln Co…  10.4     8  460    215  3     5.42  17.8     0     0     3     4\n 8 Chrysler I…  14.7     8  440    230  3.23  5.34  17.4     0     0     3     4\n 9 Dodge Chal…  15.5     8  318    150  2.76  3.52  16.9     0     0     3     2\n10 AMC Javelin  15.2     8  304    150  3.15  3.44  17.3     0     0     3     2\n11 Camaro Z28   13.3     8  350    245  3.73  3.84  15.4     0     0     3     4\n12 Pontiac Fi…  19.2     8  400    175  3.08  3.84  17.0     0     0     3     2\n13 Ford Pante…  15.8     8  351    264  4.22  3.17  14.5     0     1     5     4\n14 Maserati B…  15       8  301    335  3.54  3.57  14.6     0     1     5     8\n```\n\n\n:::\n:::\n\n## `arrange()`: Reorder rows\n\n`arrange()` sorts the rows of a data frame by one or more columns.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sort cars by miles per gallon (mpg) in ascending order (the default)\nmtcars_df %>% arrange(mpg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 32 × 12\n   car_name      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   <chr>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 Cadillac F…  10.4     8  472    205  2.93  5.25  18.0     0     0     3     4\n 2 Lincoln Co…  10.4     8  460    215  3     5.42  17.8     0     0     3     4\n 3 Camaro Z28   13.3     8  350    245  3.73  3.84  15.4     0     0     3     4\n 4 Duster 360   14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n 5 Chrysler I…  14.7     8  440    230  3.23  5.34  17.4     0     0     3     4\n 6 Maserati B…  15       8  301    335  3.54  3.57  14.6     0     1     5     8\n 7 Merc 450SLC  15.2     8  276.   180  3.07  3.78  18       0     0     3     3\n 8 AMC Javelin  15.2     8  304    150  3.15  3.44  17.3     0     0     3     2\n 9 Dodge Chal…  15.5     8  318    150  2.76  3.52  16.9     0     0     3     2\n10 Ford Pante…  15.8     8  351    264  4.22  3.17  14.5     0     1     5     4\n# ℹ 22 more rows\n```\n\n\n:::\n:::\n\nUse `desc()` to sort in descending order.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sort by cylinder count (desc) and then by mpg (desc) for tie-breaking\nmtcars_df %>% arrange(desc(cyl), desc(mpg))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 32 × 12\n   car_name      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   <chr>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 Pontiac Fi…  19.2     8  400    175  3.08  3.84  17.0     0     0     3     2\n 2 Hornet Spo…  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n 3 Merc 450SL   17.3     8  276.   180  3.07  3.73  17.6     0     0     3     3\n 4 Merc 450SE   16.4     8  276.   180  3.07  4.07  17.4     0     0     3     3\n 5 Ford Pante…  15.8     8  351    264  4.22  3.17  14.5     0     1     5     4\n 6 Dodge Chal…  15.5     8  318    150  2.76  3.52  16.9     0     0     3     2\n 7 Merc 450SLC  15.2     8  276.   180  3.07  3.78  18       0     0     3     3\n 8 AMC Javelin  15.2     8  304    150  3.15  3.44  17.3     0     0     3     2\n 9 Maserati B…  15       8  301    335  3.54  3.57  14.6     0     1     5     8\n10 Chrysler I…  14.7     8  440    230  3.23  5.34  17.4     0     0     3     4\n# ℹ 22 more rows\n```\n\n\n:::\n:::\n\n## `mutate()`: Create new columns\n\n`mutate()` adds new columns or transforms existing ones, while keeping all existing columns.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a new column for horsepower-to-weight ratio\nmtcars_df %>% mutate(hp_per_wt = hp / wt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 32 × 13\n   car_name      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   <chr>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 Mazda RX4    21       6  160    110  3.9   2.62  16.5     0     1     4     4\n 2 Mazda RX4 …  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n 3 Datsun 710   22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n 4 Hornet 4 D…  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n 5 Hornet Spo…  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n 6 Valiant      18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n 7 Duster 360   14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n 8 Merc 240D    24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n 9 Merc 230     22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n10 Merc 280     19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n# ℹ 22 more rows\n# ℹ 1 more variable: hp_per_wt <dbl>\n```\n\n\n:::\n:::\n\nUse `case_when()` for complex conditional logic, which is like a more powerful version of an if-else statement.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a column for cylinder category\nmtcars_df %>% mutate(cyl_group = case_when(\n    cyl == 4 ~ \"Four-Cylinder\",\n    cyl == 6 ~ \"Six-Cylinder\",\n    cyl == 8 ~ \"Eight-Cylinder\",\n    TRUE ~ \"Other\" # Fallback for any other case\n  ))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 32 × 13\n   car_name      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   <chr>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 Mazda RX4    21       6  160    110  3.9   2.62  16.5     0     1     4     4\n 2 Mazda RX4 …  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n 3 Datsun 710   22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n 4 Hornet 4 D…  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n 5 Hornet Spo…  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n 6 Valiant      18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n 7 Duster 360   14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n 8 Merc 240D    24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n 9 Merc 230     22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n10 Merc 280     19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n# ℹ 22 more rows\n# ℹ 1 more variable: cyl_group <chr>\n```\n\n\n:::\n:::\n\n## `summarise()` and `group_by()`: Collapse rows to a summary\n\nThis is one of the most powerful combinations in `dplyr`. `group_by()` groups the data by one or more variables. Subsequent operations are then performed on each group independently. `summarise()` then collapses each group into a single-row summary.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate summary statistics for each cylinder group\nmtcars_df %>% \n  group_by(cyl) %>% \n  summarise(\n    avg_mpg = mean(mpg, na.rm = TRUE),\n    median_hp = median(hp, na.rm = TRUE),\n    min_wt = min(wt, na.rm = TRUE),\n    max_wt = max(wt, na.rm = TRUE),\n    car_count = n() # n() counts the number of rows in the group\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 6\n    cyl avg_mpg median_hp min_wt max_wt car_count\n  <dbl>   <dbl>     <dbl>  <dbl>  <dbl>     <int>\n1     4    26.7       91    1.51   3.19        11\n2     6    19.7      110    2.62   3.46         7\n3     8    15.1      192.   3.17   5.42        14\n```\n\n\n:::\n:::\n\n## Joining Tables\n\n`dplyr` provides a family of join functions to combine data from different tables.\n\n::: {.cell}\n\n```{.r .cell-code}\nband_members_df <- tribble(\n  ~name,     ~band, \n  \"Mick\",    \"Stones\",\n  \"John\",    \"Beatles\",\n  \"Paul\",    \"Beatles\"\n)\n\nband_instruments_df <- tribble(\n  ~name,     ~plays, \n  \"Mick\",    \"vocals\",\n  \"John\",    \"guitar\",\n  \"Keith\",   \"guitar\"\n)\n```\n:::\n\n-   `inner_join()`: Returns only the rows where the key exists in both tables.\n-   `left_join()`: Returns all rows from the left table, and matching rows from the right table.\n-   `full_join()`: Returns all rows from both tables.\n-   `anti_join()`: Returns all rows from the left table that do not have a match in the right table.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Left join to keep all members and see who plays an instrument\nleft_join(band_members_df, band_instruments_df, by = \"name\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 Mick  Stones  vocals\n2 John  Beatles guitar\n3 Paul  Beatles <NA>  \n```\n\n\n:::\n\n```{.r .cell-code}\n# Anti join to find which members are not in the instruments table\nanti_join(band_members_df, band_instruments_df, by = \"name\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  name  band   \n  <chr> <chr>  \n1 Paul  Beatles\n```\n\n\n:::\n:::\n\n\n\n\n\n# 2. `tidyr`: Tidy Your Data\n\n`tidyr` provides tools for reshaping data. The goal is to create \"tidy\" data, which has a specific structure:\n1.  Every column is a variable.\n2.  Every row is an observation.\n3.  Every cell is a single value.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a sample wide-format (untidy) dataset\nwide_data <- read.table(header = TRUE, text = '\n subject sex control cond1 cond2\n       1   M     7.9  12.3  10.7\n       2   F     6.3  10.6  11.1\n')\n```\n:::\n\n### `pivot_longer()`: Wide to Long\n\n`pivot_longer()` makes data \"longer\" by gathering multiple columns into key-value pairs. This is often the first step to making data \"tidy.\"\n\n::: {.cell}\n\n```{.r .cell-code}\nlong_data <- wide_data %>% \n  pivot_longer(\n    cols = c(control, cond1, cond2), # The columns to pivot\n    names_to = 'condition',         # New column for the old column names\n    values_to = 'measurement'       # New column for the old cell values\n  )\n\nlong_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  subject sex   condition measurement\n    <int> <chr> <chr>           <dbl>\n1       1 M     control           7.9\n2       1 M     cond1            12.3\n3       1 M     cond2            10.7\n4       2 F     control           6.3\n5       2 F     cond1            10.6\n6       2 F     cond2            11.1\n```\n\n\n:::\n:::\n\n### `pivot_wider()`: Long to Wide\n\n`pivot_wider()` does the opposite, making data \"wider\" by spreading a key-value pair into multiple columns.\n\n::: {.cell}\n\n```{.r .cell-code}\nlong_data %>% \n  pivot_wider(\n    names_from = condition,   # Column to get new column names from\n    values_from = measurement # Column to get cell values from\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 5\n  subject sex   control cond1 cond2\n    <int> <chr>   <dbl> <dbl> <dbl>\n1       1 M         7.9  12.3  10.7\n2       2 F         6.3  10.6  11.1\n```\n\n\n:::\n:::\n\n# 3. `stringr`: String Manipulation\n\n`stringr` provides a consistent and user-friendly interface for common string operations, built on top of the `stringi` package.\n\n![](images/logo-01.png)\n\n::: {.cell}\n\n```{.r .cell-code}\ntext_vector <- c(\"apple\", \"banana\", \"pear\", \"pineapple\")\n```\n:::\n\n-   `str_detect()`: Check for the presence of a pattern.\n-   `str_replace()`: Replace the first match of a pattern.\n-   `str_extract()`: Extract the first match of a pattern.\n-   `str_split()`: Split a string into pieces.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find elements containing \"apple\"\nstr_detect(text_vector, \"apple\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE FALSE  TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# Extract numbers from a string using a regular expression\n# \\d+ is a regex for one or more digits\nstr_extract(\"Order_ID_12345\", \"\\\\d+\") \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"12345\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Split a string by a delimiter\nstr_split(\"a-b-c\", \"-\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"a\" \"b\" \"c\"\n```\n\n\n:::\n:::\n\n# 4. `lubridate`: Date and Time Manipulation\n\n`lubridate` simplifies working with dates and times in R, which can otherwise be quite complex.\n\n![](images/logo-02.png)\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\n```\n:::\n\n\ntoday:\n\n::: {.cell}\n\n```{.r .cell-code}\ntoday()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2025-07-01\"\n```\n\n\n:::\n:::\n\n\n-   **Parsing:** `ymd()`, `mdy()`, `dmy()` parse strings into dates reliably, automatically handling different separators.\n-   **Component Extraction:** `year()`, `month()`, `day()`, `wday()` extract parts of a date.\n-   **Arithmetic:** Perform calculations with date and time objects using `duration` and `period` objects.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Parse a date\ndate_obj <- ymd(\"2023-10-27\")\n\n# Get the day of the week\nwday(date_obj, label = TRUE, abbr = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] Friday\n7 Levels: Sunday < Monday < Tuesday < Wednesday < Thursday < ... < Saturday\n```\n\n\n:::\n\n```{.r .cell-code}\n# Add 15 days to the date\ndate_obj + days(15)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2023-11-11\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Calculate the time difference between two dates\nnew_year <- ymd(\"2024-01-01\")\ninterval(date_obj, new_year) / days(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 66\n```\n\n\n:::\n:::\n\n\n# 4. Window Functions\n\nWindow functions are functions that operate on a \"window\" of data (e.g., within a group) but, unlike `summarise()`, they return a value for every row.\n\n## Ranking with `row_number`\n\n`row_number()` assigns a unique rank to each row within a group.\n\n::: {.cell}\n\n```{.r .cell-code}\nsmall_mtcars %>% \n  group_by(cyl) %>% \n  mutate(rank = row_number(desc(mpg))) %>% \n  select(cyl, mpg, rank)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n# Groups:   cyl [3]\n    cyl   mpg  rank\n  <dbl> <dbl> <int>\n1     6  21       2\n2     6  21       3\n3     4  22.8     1\n4     6  21.4     1\n5     8  18.7     1\n6     6  18.1     4\n```\n\n\n:::\n:::\n\n## Accessing Previous/Next Values with `lag` and `lead`\n\n`lag()` and `lead()` are useful for comparing a value to its predecessor or successor.\n\n::: {.cell}\n\n```{.r .cell-code}\nsmall_mtcars %>% \n  select(cyl, mpg) %>% \n  mutate(mpg_previous = lag(mpg, n = 1))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  cyl  mpg mpg_previous\n1   6 21.0           NA\n2   6 21.0         21.0\n3   4 22.8         21.0\n4   6 21.4         22.8\n5   8 18.7         21.4\n6   6 18.1         18.7\n```\n\n\n:::\n:::\n\n## Cumulative Summaries\n\n`cumsum()` calculates the cumulative sum.\n\n::: {.cell}\n\n```{.r .cell-code}\nsmall_mtcars %>% \n  select(cyl, mpg) %>% \n  mutate(mpg_running_total = cumsum(mpg))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  cyl  mpg mpg_running_total\n1   6 21.0              21.0\n2   6 21.0              42.0\n3   4 22.8              64.8\n4   6 21.4              86.2\n5   8 18.7             104.9\n6   6 18.1             123.0\n```\n\n\n:::\n:::\n\n## Order Rows\n\n`arrange()` sorts the rows of a data frame by one or more columns.\n\n::: {.cell}\n\n```{.r .cell-code}\nsmall_mtcars %>% arrange(cyl) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           car_name cyl  mpg  hp\n1        Datsun 710   4 22.8  93\n2         Mazda RX4   6 21.0 110\n3     Mazda RX4 Wag   6 21.0 110\n4    Hornet 4 Drive   6 21.4 110\n5           Valiant   6 18.1 105\n6 Hornet Sportabout   8 18.7 175\n```\n\n\n:::\n:::\n\nSort in descending order using `desc()`.\n\n::: {.cell}\n\n```{.r .cell-code}\nsmall_mtcars %>% arrange(desc(cyl))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           car_name cyl  mpg  hp\n1 Hornet Sportabout   8 18.7 175\n2         Mazda RX4   6 21.0 110\n3     Mazda RX4 Wag   6 21.0 110\n4    Hornet 4 Drive   6 21.4 110\n5           Valiant   6 18.1 105\n6        Datsun 710   4 22.8  93\n```\n\n\n:::\n:::\n\n\n# 5. Handle Missing Data\n\nLet's create a sample data frame with missing values (`NA`).\n\n::: {.cell}\n\n```{.r .cell-code}\nmissing_df <- data.frame(\n  x = c(1, 2, NA, 4),\n  y = c(\"a\", NA, \"c\", \"d\")\n)\n```\n:::\n\n## Find Missing Data\n\n`is.na()` returns a logical vector indicating which values are missing.\n\n::: {.cell}\n\n```{.r .cell-code}\nis.na(missing_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         x     y\n[1,] FALSE FALSE\n[2,] FALSE  TRUE\n[3,]  TRUE FALSE\n[4,] FALSE FALSE\n```\n\n\n:::\n:::\n\n## Filter Out Missing Data\n\nYou can use `filter()` with `!is.na()` to remove rows with missing values in a specific column.\n\n::: {.cell}\n\n```{.r .cell-code}\nmissing_df %>% filter(!is.na(y))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   x y\n1  1 a\n2 NA c\n3  4 d\n```\n\n\n:::\n:::\n\n`tidyr::drop_na()` removes rows with any missing values.\n\n::: {.cell}\n\n```{.r .cell-code}\nmissing_df %>% drop_na()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  x y\n1 1 a\n2 4 d\n```\n\n\n:::\n:::\n\n# 6. dataframe to other data format\n\n## dataframe to vector\n\n::: {.cell}\n\n```{.r .cell-code}\ndata=small_mtcars$cyl\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6 6 4 6 8 6\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n## dataframe to matrix\n\n::: {.cell}\n\n```{.r .cell-code}\ndata=data.matrix(small_mtcars)\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     car_name cyl  mpg  hp\n[1,]        4   6 21.0 110\n[2,]        5   6 21.0 110\n[3,]        1   4 22.8  93\n[4,]        2   6 21.4 110\n[5,]        3   8 18.7 175\n[6,]        6   6 18.1 105\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"matrix\" \"array\" \n```\n\n\n:::\n:::\n\n## dataframe to list\n\n::: {.cell}\n\n```{.r .cell-code}\ndata=as.list(small_mtcars)\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$car_name\n[1] \"Mazda RX4\"         \"Mazda RX4 Wag\"     \"Datsun 710\"       \n[4] \"Hornet 4 Drive\"    \"Hornet Sportabout\" \"Valiant\"          \n\n$cyl\n[1] 6 6 4 6 8 6\n\n$mpg\n[1] 21.0 21.0 22.8 21.4 18.7 18.1\n\n$hp\n[1] 110 110  93 110 175 105\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"list\"\n```\n\n\n:::\n:::\n\n\n\n\n# 5. References\n\n-   [R for Data Science, 2nd Edition](https://r4ds.hadley.nz/)\n-   [dplyr Documentation](https://dplyr.tidyverse.org/)\n-   [tidyr Documentation](https://tidyr.tidyverse.org/)\n-   [stringr Documentation](https://stringr.tidyverse.org/)\n-   [lubridate Documentation](https://lubridate.tidyverse.org/)\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}