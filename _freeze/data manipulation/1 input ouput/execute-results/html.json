{
  "hash": "5efd6cbd58dcd38cbd32db09a665d13e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Input & Output in R\"\nauthor: \"Tony Duan\"\nexecute:\n  warning: false\n  error: false\nformat:\n  html:\n    toc: true\n    toc-location: right\n    code-fold: show\n    code-tools: true\n    number-sections: false\n    code-block-bg: true\n    code-block-border-left: \"#31BAE9\"\n---\n\nThis document provides a comprehensive guide to reading data into R (input) and writing data out of R (output). We will cover a wide variety of common file formats, from traditional text files to modern, high-performance formats.\n\n![](images/1_-OQi5hp-uoL_KdIydr4hew.gif){width=\"500\"}\n\n::: {.cell}\n\n```{.r .cell-code}\npak::pak(c('tidyverse','openxlsx','arrow','readxl'))\n```\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load common packages for I/O operations\nlibrary(tidyverse)\nlibrary(openxlsx)\nlibrary(arrow)\nlibrary(readxl)\n```\n:::\n\n# 1. Input: Reading Data into R\n\n## 1.1. Text Files (CSV, TXT)\n\n### Reading CSV Files\n\nComma-Separated Values (CSV) are one of the most common formats for storing tabular data. The `readr` package (part of the `tidyverse`) provides the `read_csv()` function, which is fast and efficient.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a sample data frame to write to a CSV\nsample_df <- tibble(\n  id = 1:5,\n  name = c(\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\"),\n  score = c(95, 82, 78, 91, 88)\n)\n\nwrite_csv(sample_df, \"data/sample_data.csv\")\n\n# Read the CSV file back into R\ndata_from_csv <- read_csv(\"data/sample_data.csv\")\nhead(data_from_csv)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n     id name    score\n  <dbl> <chr>   <dbl>\n1     1 Alice      95\n2     2 Bob        82\n3     3 Charlie    78\n4     4 David      91\n5     5 Eve        88\n```\n\n\n:::\n:::\n\n### Reading Delimited Files\n\nFor text files that use delimiters other than commas (like tabs or semicolons), you can use `read_delim()`.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Write a tab-delimited file\nwrite_delim(sample_df, \"data/sample_data.txt\", delim = \"\\t\")\n\n# Read the tab-delimited file\ndata_from_txt <- read_delim(\"data/sample_data.txt\", delim = \"\\t\")\nhead(data_from_txt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n     id name    score\n  <dbl> <chr>   <dbl>\n1     1 Alice      95\n2     2 Bob        82\n3     3 Charlie    78\n4     4 David      91\n5     5 Eve        88\n```\n\n\n:::\n:::\n\n## 1.2. Excel Files (.xlsx)\n\nThe `readxl` package is excellent for reading `.xls` and `.xlsx` files. The `openxlsx` package can be used for both reading and writing.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Write the sample data to an Excel file\nwrite.xlsx(sample_df, \"data/sample_data.xlsx\")\n\n# Read the data from the Excel file\ndata_from_excel <- read_excel(\"data/sample_data.xlsx\")\nhead(data_from_excel)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n     id name    score\n  <dbl> <chr>   <dbl>\n1     1 Alice      95\n2     2 Bob        82\n3     3 Charlie    78\n4     4 David      91\n5     5 Eve        88\n```\n\n\n:::\n:::\n\n## 1.3. High-Performance Formats (Parquet, Feather)\n\nFor large datasets, text-based formats are inefficient. Binary formats like Parquet and Feather are much faster to read and write and take up less disk space.\n\n### Reading Parquet Files\n\nParquet is a columnar storage format optimized for big data processing. The `arrow` package provides the interface to work with Parquet files.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Write data to a Parquet file\nwrite_parquet(sample_df, \"data/sample_data.parquet\")\n\n# Read data from the Parquet file\ndata_from_parquet <- read_parquet(\"data/sample_data.parquet\")\nhead(data_from_parquet)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n     id name    score\n  <int> <chr>   <dbl>\n1     1 Alice      95\n2     2 Bob        82\n3     3 Charlie    78\n4     4 David      91\n5     5 Eve        88\n```\n\n\n:::\n:::\n\n### Reading Feather Files\n\nFeather is a fast, lightweight binary format designed for sharing data between R and Python.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Write data to a Feather file\nwrite_feather(sample_df, \"data/sample_data.feather\")\n\n# Read data from the Feather file\ndata_from_feather <- read_feather(\"data/sample_data.feather\")\nhead(data_from_feather)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n     id name    score\n  <int> <chr>   <dbl>\n1     1 Alice      95\n2     2 Bob        82\n3     3 Charlie    78\n4     4 David      91\n5     5 Eve        88\n```\n\n\n:::\n:::\n\n## 1.4. R-Specific Formats (.Rds, .RData)\n\nR has its own native formats for saving any R object.\n\n-   `.Rds`: Saves a **single** R object.\n-   `.RData`: Saves **multiple** R objects and can save the entire workspace.\n\n### Reading an .Rds File\n\n::: {.cell}\n\n```{.r .cell-code}\n# Save a single object (our data frame)\nsaveRDS(sample_df, \"data/sample_df.rds\")\n\n# Read the object back\ndata_from_rds <- readRDS(\"data/sample_df.rds\")\nhead(data_from_rds)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n     id name    score\n  <int> <chr>   <dbl>\n1     1 Alice      95\n2     2 Bob        82\n3     3 Charlie    78\n4     4 David      91\n5     5 Eve        88\n```\n\n\n:::\n:::\n\n### Loading an .RData File\n\n::: {.cell}\n\n```{.r .cell-code}\n# Save multiple objects to one file\nsave(sample_df, mtcars, file = \"data/multiple_objects.RData\")\n\n# Clear the objects from the environment to show they are loaded\nrm(sample_df, mtcars)\n\n# Load the objects back into the workspace\nload(\"data/multiple_objects.RData\")\n\n# Check that they exist again\nhead(sample_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n     id name    score\n  <int> <chr>   <dbl>\n1     1 Alice      95\n2     2 Bob        82\n3     3 Charlie    78\n4     4 David      91\n5     5 Eve        88\n```\n\n\n:::\n:::\n\n## 1.5. Reading from a Database\n\nConnecting to databases is covered in detail in a separate guide (`6 SQL database.qmd`), but here is a quick example using SQLite.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DBI)\nlibrary(RSQLite)\n\n# Create an in-memory SQLite database and write mtcars to it\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\ndbWriteTable(con, \"mtcars_table\", mtcars)\n\n# Read the full table back into an R data frame\nmtcars_from_db <- dbReadTable(con, \"mtcars_table\")\ndbDisconnect(con)\n\nhead(mtcars_from_db)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   mpg cyl disp  hp drat    wt  qsec vs am gear carb\n1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n6 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n```\n\n\n:::\n:::\n\n\n\n\n## 1.6 Read .docx (Word) file\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(officer)\n# docx = read_docx(\"data/example03.docx\")\n# docx_summary(docx)\n```\n:::\n\n\n\n## 1.7 Read PDF Tables\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tabulapdf)\n# out <- extract_tables('data/60870-By-the-Numbers.pdf')\n# out[[1]]\n```\n:::\n\n\n\n# 2. Output: Writing Data from R\n\nWriting data is the reverse of reading. The functions are generally named `write_*()`.\n\n## 2.1. Write to CSV\n\n::: {.cell}\n\n```{.r .cell-code}\n# The `write_csv` function from readr is a great choice\nwrite_csv(mtcars, \"data/mtcars_output.csv\")\n```\n:::\n\n## 2.2. Write to Excel\n\n::: {.cell}\n\n```{.r .cell-code}\n# The `write.xlsx` function from openxlsx is very convenient\nwrite.xlsx(iris, \"data/iris_output.xlsx\")\n```\n:::\n\n## 2.3. Write to Parquet\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use the arrow package for high-performance writing\nwrite_parquet(airquality, \"data/airquality_output.parquet\")\n```\n:::\n\n## 2.4. Write to Feather\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ideal for R-to-Python data exchange\nwrite_feather(diamonds, \"data/diamonds_output.feather\")\n```\n:::\n\n## 2.5. Write to R-Specific Formats\n\n::: {.cell}\n\n```{.r .cell-code}\n# Save a single model object\nmy_model <- lm(mpg ~ hp, data = mtcars)\nsaveRDS(my_model, \"data/linear_model.rds\")\n\n# Save the entire current workspace\n# save.image(file = \"data/my_full_workspace.RData\")\n```\n:::\n\n## 2.6. Write to a Database\n\n::: {.cell}\n\n```{.r .cell-code}\n# Establish a connection\ncon <- dbConnect(RSQLite::SQLite(), \"data/my_output_database.sqlite\")\n\n# Write the iris dataset to a new table named 'iris_table'\n# `overwrite = TRUE` will replace the table if it already exists\ndbWriteTable(con, \"iris_table\", iris, overwrite = TRUE)\n\n# List tables to confirm it was created\nprint(dbListTables(con))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"iris_table\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Clean up\ndbDisconnect(con)\n```\n:::\n\n\n## 2.7 Write to Google Sheets\n\nYou can write a data frame to a new or existing Google Sheet. This requires authentication.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(googlesheets4)\n\n# Create a data frame to write\nmy_data_to_write <- data.frame(\n  Name = c(\"Ada Lovelace\", \"Grace Hopper\"),\n  Contribution = c(\"First algorithm\", \"COBOL\")\n)\n\n# Write the data to a new Google Sheet file named 'R-Sheet-Output'\nss <- write_sheet(my_data_to_write, ss = \"R-Sheet-Output\", sheet = \"Sheet1\")\n\n# The returned object `ss` contains the URL of the new sheet\nprint(ss)\n```\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}