{
  "hash": "a24ecf94407a7a4615fe606951d5a09d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Structures in R\"\nexecute:\n  warning: false\n  error: false\nformat:\n  html:\n    toc: true\n    toc-location: right\n    code-fold: show\n    code-tools: true\n    number-sections: true\n    code-block-bg: true\n    code-block-border-left: \"#31BAE9\"\n---\n\nThis document provides a detailed overview of the fundamental data structures in R, with explanations and code examples.\n\n![](images/download.jpg){width=\"600\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n# Vectors\n\nA vector is a one-dimensional, ordered collection of elements. A key characteristic of vectors is that all elements must be of the same data type (homogeneous). They are the simplest and most common data structure in R.\n\nHere, we create a numeric vector using the `c()` (combine) function.\n\n::: {.cell}\n\n```{.r .cell-code}\na = c(1, 2, 3, 4)\na\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4\n```\n\n\n:::\n:::\n\nThe `class()` function confirms that the vector is of type \"numeric\".\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\nThis example creates a character vector.\n\n::: {.cell}\n\n```{.r .cell-code}\nb =  c(\"Debi\", \"Sandeep\", \"Subham\", \"Shiba\")\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Debi\"    \"Sandeep\" \"Subham\"  \"Shiba\"  \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(b)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n## Creating Vectors\n\n### Sequence Vector\n\nThe `seq()` function generates a sequence of numbers.\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(from = 2, to = 14, by = 2) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2  4  6  8 10 12 14\n```\n\n\n:::\n:::\n\n### Replicated Vector\n\nThe `rep()` function repeats a value a specified number of times.\n\n::: {.cell}\n\n```{.r .cell-code}\nrep(x = 1.5, times = 4)  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.5 1.5 1.5 1.5\n```\n\n\n:::\n:::\n\n### Random Vector\n\nThe `sample()` function takes a random sample from a set of elements. `replace = FALSE` means each element can only be chosen once.\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(1:10, 5, replace = FALSE) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9 2 7 4 8\n```\n\n\n:::\n:::\n\nWith `replace = TRUE`, elements can be chosen multiple times.\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(1:10, 5, replace = TRUE) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5 6 9 9 7\n```\n\n\n:::\n:::\n\n`runif()` generates random numbers from a uniform distribution.\n\n::: {.cell}\n\n```{.r .cell-code}\nrunif(1, min = 0, max = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.6721013\n```\n\n\n:::\n:::\n\n`rnorm()` generates random numbers from a normal distribution.\n\n::: {.cell}\n\n```{.r .cell-code}\nsn1 <- rnorm(4, mean = 0, sd = 1) # Standard normal distribution\nsn1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.9667081  0.3027156  0.7218398 -0.7725936\n```\n\n\n:::\n:::\n\n### Unique Vector\n\nThe `unique()` function removes duplicate elements from a vector.\n\n::: {.cell}\n\n```{.r .cell-code}\nv1 = c(1, 1, 2, 2, 5, 6)\nv1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 1 2 2 5 6\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(v1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 5 6\n```\n\n\n:::\n:::\n\n## Vector Operations\n\n### Append Vector\n\nYou can combine vectors by using the `c()` function.\n\n::: {.cell}\n\n```{.r .cell-code}\nx = c(1, 2, 3)\ny = c(4, 5, 6)\nz = c(x, y)\nz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5 6\n```\n\n\n:::\n:::\n\n### Remove Elements from a Vector\n\nNegative indexing removes elements at the specified positions.\n\n::: {.cell}\n\n```{.r .cell-code}\nx = c(1, 2, 3, 4, 5)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n:::\n\nRemove the first element:\n\n::: {.cell}\n\n```{.r .cell-code}\nx[-1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 3 4 5\n```\n\n\n:::\n:::\n\nRemove the last element:\n\n::: {.cell}\n\n```{.r .cell-code}\nx[-length(x)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4\n```\n\n\n:::\n:::\n\nRemove elements based on a vector of indices:\n\n::: {.cell}\n\n```{.r .cell-code}\nremove = c(2, 4)\nx[-remove]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 3 5\n```\n\n\n:::\n:::\n\n### Sort Vector\n\n`sort()` arranges vector elements in ascending or descending order.\n\n::: {.cell}\n\n```{.r .cell-code}\na = c(2, 4, 6, 1, 4)\nsort(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 4 4 6\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsort(a, decreasing = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6 4 4 2 1\n```\n\n\n:::\n:::\n\n### Vector Length\n\n`length()` returns the number of elements in a vector.\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n### Vector Calculation\n\nMathematical functions can be applied to entire vectors.\n\n::: {.cell}\n\n```{.r .cell-code}\nx = c(1, 2, 3, 4, 5)\nsum(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 15\n```\n\n\n:::\n:::\n\n### Select Vector Elements\n\n::: {.cell}\n\n```{.r .cell-code}\nx = c(1, 2, 3, 6, 9, 10)\n```\n:::\n\nSelect the first element:\n\n::: {.cell}\n\n```{.r .cell-code}\nx[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\nSelect the last element:\n\n::: {.cell}\n\n```{.r .cell-code}\nx[length(x)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n:::\n\nSelect a range of elements:\n\n::: {.cell}\n\n```{.r .cell-code}\nx[1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n:::\n\n### Compare Two Vectors\n\n`setdiff(x, y)` finds elements that are in vector `x` but not in vector `y`.\n\n::: {.cell}\n\n```{.r .cell-code}\nxx = c(1, 2, 3, 4)\nyy = c(2, 4)\nsetdiff(xx, yy)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 3\n```\n\n\n:::\n:::\n\n## Converting Between Vector Types\n\n`as.*` functions are used to coerce vectors from one type to another.\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(\"a\", \"g\", \"b\")\ny = as.factor(x)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] a g b\nLevels: a b g\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c('123', '44', '222')\ny = as.numeric(x)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 123  44 222\n```\n\n\n:::\n:::\n\n# Data Frames\n\nA data frame is a two-dimensional, heterogeneous data structure, similar to a spreadsheet or a SQL table. Each column can have a different data type, but all elements within a column must be of the same type. It is the most common data structure for storing datasets in R.\n\n::: {.cell}\n\n```{.r .cell-code}\nName = c(\"Amiya\", \"Raj\", \"Asish\")\nLanguage = c(\"R\", \"Python\", \"Java\")\nAge = c(22, 25, 45)\n\ndf = data.frame(Name, Language, Age)\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Name Language Age\n1 Amiya        R  22\n2   Raj   Python  25\n3 Asish     Java  45\n```\n\n\n:::\n:::\n\n## Data Frame to Other Formats\n\n### Data Frame to Matrix\n\nConverting a data frame to a matrix will coerce all elements to the most flexible data type (usually character).\n\n::: {.cell}\n\n```{.r .cell-code}\nmat <- as.matrix(df)\nmat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Name    Language Age \n[1,] \"Amiya\" \"R\"      \"22\"\n[2,] \"Raj\"   \"Python\" \"25\"\n[3,] \"Asish\" \"Java\"   \"45\"\n```\n\n\n:::\n:::\n\n### Data Frame to Vector\n\nYou can extract a single column as a vector using `$` or `[[ ]]` notation.\n\n::: {.cell}\n\n```{.r .cell-code}\nvec = df[['Name']]\nvec\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Amiya\" \"Raj\"   \"Asish\"\n```\n\n\n:::\n:::\n\n# Matrices\n\nA matrix is a two-dimensional, homogeneous data structure. All elements must be of the same type. It has a fixed number of rows and columns.\n\n::: {.cell}\n\n```{.r .cell-code}\nA = matrix(\n    c(1, 2, 3, 4, 5, 6, 7, 8, 9), \n    nrow = 3, \n    ncol = 3,  \n    byrow = TRUE # Fill the matrix row by row\n)\nA\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n```\n\n\n:::\n:::\n\n\nAccess the element in the 2nd row, 3rd column:\n\n::: {.cell}\n\n```{.r .cell-code}\nA [2, 3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n:::\n\nAccess the entire 1st row:\n\n::: {.cell}\n\n```{.r .cell-code}\nA[1, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n:::\n\nAccess the entire 3rd column:\n\n::: {.cell}\n\n```{.r .cell-code}\nA [, 3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 6 9\n```\n\n\n:::\n:::\n\n\nMatrices support element-wise mathematical operations.\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrix002 = A + A\nmatrix002\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    2    4    6\n[2,]    8   10   12\n[3,]   14   16   18\n```\n\n\n:::\n:::\n\n# Lists\n\nA list is a one-dimensional, heterogeneous data structure. Unlike vectors, lists can contain elements of different types, including other lists, vectors, or even functions.\n\n::: {.cell}\n\n```{.r .cell-code}\nempId = c(1, 2, 3, 4)\nempName = c(\"Debi\", \"Sandeep\", \"Subham\", \"Shiba\")\nnumberOfEmp = 4\n\nempList = list(ID = empId, Names = empName, Total = numberOfEmp)\nempList\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$ID\n[1] 1 2 3 4\n\n$Names\n[1] \"Debi\"    \"Sandeep\" \"Subham\"  \"Shiba\"  \n\n$Total\n[1] 4\n```\n\n\n:::\n:::\n\n\n\n## Accessing List Elements\n\nUse `[[index]]` or `[[name]]` to access the content of a single list element. Use `$` as a shortcut for named elements.\n\nAccess the second element (a vector):\n\n::: {.cell}\n\n```{.r .cell-code}\nempList[[2]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Debi\"    \"Sandeep\" \"Subham\"  \"Shiba\"  \n```\n\n\n:::\n:::\n\nAccess the element named \"item3\" (a data frame):\n\n::: {.cell}\n\n```{.r .cell-code}\nempList[[\"Names\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Debi\"    \"Sandeep\" \"Subham\"  \"Shiba\"  \n```\n\n\n:::\n:::\n\nUse the `$` operator for the same result:\n\n::: {.cell}\n\n```{.r .cell-code}\nempList$Names\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Debi\"    \"Sandeep\" \"Subham\"  \"Shiba\"  \n```\n\n\n:::\n:::\n\n\n# Arrays\n\nAn array is a multi-dimensional, homogeneous data structure. It can have two or more dimensions.\n\nThis example creates a 3D array with 2 rows, 2 columns, and 2 \"layers\".\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_array = array(\n    c(1, 2, 3, 4, 5, 6, 7, 8),\n    dim = c(2, 2, 2)                        \n)\nmy_array\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n, , 1\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n, , 2\n\n     [,1] [,2]\n[1,]    5    7\n[2,]    6    8\n```\n\n\n:::\n:::\n\n\n## Accessing Array Elements\n\nElements are accessed using `[row, column, dimension]` notation.\n\nAccess the element in the 1st row, 2nd column of the 2nd dimension (layer):\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_array[1, 2, 2]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7\n```\n\n\n:::\n:::\n\n\nAccess the entire first matrix (1st layer):\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_array[, , 1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n```\n\n\n:::\n:::\n\n\n\n\n# Inspecting Data Structures\n\nUnderstanding the structure of your data is a critical first step in any analysis. R provides several useful functions for this.\n\n## The str() Function\n\nThe `str()` (structure) function is one of the most useful diagnostic tools in R. It provides a compact, human-readable summary of any R object, showing its type, dimensions, and a preview of its content.\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t3 obs. of  3 variables:\n $ Name    : chr  \"Amiya\" \"Raj\" \"Asish\"\n $ Language: chr  \"R\" \"Python\" \"Java\"\n $ Age     : num  22 25 45\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(empList)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 3\n $ ID   : num [1:4] 1 2 3 4\n $ Names: chr [1:4] \"Debi\" \"Sandeep\" \"Subham\" \"Shiba\"\n $ Total: num 4\n```\n\n\n:::\n:::\n\n## Other Inspection Functions\n\n- `class()`: Returns the high-level class of an object.\n- `typeof()`: Returns the internal storage type of an object.\n- `length()`: Returns the number of elements in a vector or list.\n- `dim()`: Returns the dimensions (e.g., rows and columns) of a data frame, matrix, or array.\n- `names()` or `colnames()`: Returns the column names of a data frame, matrix, or list.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a sample data frame\ninspect_df <- data.frame(\n  ID = 1:3,\n  Product = c(\"A\", \"B\", \"C\"),\n  Price = c(10.5, 20.0, 15.2)\n)\n\nclass(inspect_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(inspect_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 3\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(inspect_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"ID\"      \"Product\" \"Price\"  \n```\n\n\n:::\n:::\n\n# Reference:\n\nhttps://www.geeksforgeeks.org/data-structures-in-r-programming/",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}