{
  "hash": "0c987543f241d3d69555f72abc5b6013",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data management\"\nauthor: \"Tony Duan\"\n\nexecute:\n  warning: false\n  error: false\n  \nformat:\n  html:\n    toc: true\n    toc-location: right\n    code-fold: show\n    code-tools: true\n    number-sections: false\n    code-block-bg: true\n    code-block-border-left: \"#31BAE9\"\n---\n\n# 1. Introduction to Data Management\n\nEffective data management is crucial for reproducible and collaborative data science. It involves organizing, storing, and sharing data in a way that is efficient, secure, and easy to manage. In R, the `pins` package provides a powerful and straightforward solution for this challenge.\n\n![](images/my screenshots.png)\n\nThe `pins` package allows you to \"pin\" data objects—like data frames, models, or plots—to a \"board.\" A board is a location where you store your pins, which can be a local folder, a network drive, or a cloud service like Amazon S3, Google Cloud Storage, or Posit Connect. This makes it easy to share and access data across different projects, colleagues, or even between R and Python environments.\n\nThe key idea is to treat data like a package. You can publish data to a board, and then others (or your future self) can install and use that data with a simple command, without worrying about file paths or where the data is stored.\n\n# 2. Getting Started with `pins`\n\nFirst, you need to install the package from CRAN.\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"pins\")\n```\n:::\n\nThen, load the necessary libraries. We will use `pins` and `tidyverse`.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pins)\nlibrary(tidyverse)\n```\n:::\n\n# 3. Creating a Board\n\nA board is the storage location for your pins. For this example, we will create a simple board in a local folder. This is great for managing data for your own projects on a single machine.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a board in a subfolder named 'my_local_board'\n# This folder will be created in your current working directory.\nboard <- board_folder(\"my_local_board\")\n```\n:::\n\nYou can check the path of your board.\n\n::: {.cell}\n\n```{.r .cell-code}\nboard\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPin board <pins_board_folder>\nPath: 'my_local_board'\nCache size: 0\n```\n\n\n:::\n:::\n\n# 4. Pinning Data\n\n\"Pinning\" data means saving an R object to your board with a specific name. Let's pin the built-in `mtcars` dataset.\n\nThe `pin_write()` function is used for this. It takes three main arguments:\n-   `x`: The R object you want to pin.\n-   `name`: A unique name for the pin.\n-   `board`: The board where you want to store the pin.\n-   `type`: The file format to save the pin as (e.g., \"rds\", \"csv\", \"parquet\"). `pins` will choose a sensible default if you don't specify.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Pin the mtcars data frame to our local board\n# We can also add a description for context\npin_write(board, mtcars, name = \"mtcars_data\", description = \"Motor Trend Car Road Tests dataset\", type = \"rds\")\n```\n:::\n\nYou can list the pins on your board to see what's available.\n\n::: {.cell}\n\n```{.r .cell-code}\npin_list(board)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"mtcars_data\"\n```\n\n\n:::\n:::\n\nYou can also search for pins with `pin_search()`.\n\n::: {.cell}\n\n```{.r .cell-code}\npin_search(board, \"mtcars\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 6\n  name        type  title               created             file_size meta      \n  <chr>       <chr> <chr>               <dttm>              <fs::byt> <list>    \n1 mtcars_data rds   mtcars_data: a pin… 2025-07-01 13:38:30     1.19K <pins_met>\n```\n\n\n:::\n:::\n\n# 5. Reading Data from a Pin\n\nOnce data is pinned, you can easily read it back into your R session using `pin_read()`. This is incredibly useful for starting a new analysis without having to re-run a long data preparation script.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read the 'mtcars_data' pin from our board\nmy_mtcars_data <- pin_read(board, \"mtcars_data\")\n\nhead(my_mtcars_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n```\n\n\n:::\n:::\n\n# 6. Sharing Data with Others\n\nThe real power of `pins` comes from sharing data. While a local folder board is good for personal use, you can use other board types to collaborate with a team. Common choices include:\n\n-   `board_folder()`: For a shared network drive.\n-   `board_s3()`: For Amazon S3.\n-   `board_gcs()`: For Google Cloud Storage.\n-   `board_connect()`: For Posit Connect (formerly RStudio Connect), which is an excellent choice for teams within an organization.\n\nThe workflow remains the same regardless of the board type. For example, to pin to an S3 bucket, your code would look like this (after setting up authentication):\n\n::: {.cell}\n\n```{.r .cell-code}\n# Connect to an S3 board (requires AWS credentials to be configured)\ns3_board <- board_s3(\"my-team-s3-bucket\")\n\n# Write and read from the S3 board just like a local one\npin_write(s3_board, mtcars, name = \"shared_mtcars\")\nshared_data <- pin_read(s3_board, \"shared_mtcars\")\n```\n:::\n\nThis makes your data assets portable and accessible, whether you are working on your laptop, a cloud virtual machine, or a production server.\n\n# 7. Versioning\n\n`pins` automatically versions your data. If you write to a pin with the same name multiple times, `pins` will save each version. This is a powerful feature for tracking changes and ensuring reproducibility. You can always go back to a previous version of your data if needed.\n\nLet's modify our `mtcars` data and pin it again.\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars_modified <- mtcars %>% mutate(hp_per_cyl = hp / cyl)\npin_write(board, mtcars_modified, name = \"mtcars_data\")\n```\n:::\n\nNow, you can list the available versions for the \"mtcars_data\" pin.\n\n::: {.cell}\n\n```{.r .cell-code}\npin_versions(board, \"mtcars_data\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  version                created             hash \n  <chr>                  <dttm>              <chr>\n1 20250701T053830Z-9365e 2025-07-01 13:38:30 9365e\n```\n\n\n:::\n:::\n\nYou can read a specific version by providing its version hash to `pin_read()`.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get the hash for the first version we saved\nfirst_version_hash <- pin_versions(board, \"mtcars_data\")$version[1]\n\n# Read the original data using the version hash\noriginal_data <- pin_read(board, \"mtcars_data\", version = first_version_hash)\n\n# Check that it doesn't have the new column\nhead(original_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb hp_per_cyl\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4   18.33333\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4   18.33333\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1   23.25000\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1   18.33333\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2   21.87500\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1   17.50000\n```\n\n\n:::\n:::\n\n# 8. References\n\n-   [pins for R Official Website](https://pins.rstudio.com/)\n-   [Getting Started with pins](https://pins.rstudio.com/articles/pins.html)\n-   [Managing and Sharing Data with pins Blog Post](https://posit.co/blog/2023/02/13/announcing-pins-1-1-0/)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}